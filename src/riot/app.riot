<app>
  <section>
    <p><i18n>粒子に命が宿る世界をのんびり眺めるサイトです。</i18n><br class="weak" />
      <i18n>飽きたら「次のワールドを生成」を押して下さい。</i18n></p>

    <div id="fps"><!-- 更新頻度が高いので riot を使わず生で書き換える --></div>
    <div class="columns is-desktop">
      <div class="column is-narrow" style="line-height:1;position:relative;">
        
        <particles-display width="600" height="600" intf={displayIntf}
            on-restart={()=> restart(true, !!document.fullscreenElement)} 
            on-pause={()=> this.$("#pause").click()}></particles-display><br>
        
        <color-scale-editor width="600" height="40" 
            on-update={onColorScaleEditorUpdate} intf={colorScaleEditorIntf}></color-scale-editor>
        
        <!-- メインスクリーン下のボタン列 -->
        <div class="top-buttons">
          <a class="button is-info is-small" id="new-world" onclick={()=> restart(true)}>
              <i18n>次のワールドを生成</i18n>
          </a>
          <a class="button is-info is-small" id="copy-url" onclick={onCopyUrlClick}>
              <i18n>このワールドをシェア</i18n>&nbsp;&nbsp;&nbsp;
              <span class="icon"><ion-icon name="share-social"></ion-icon></span>
          </a>
          <div class="block" id="copy-url-message">
            <span class="tag is-success">
              <i18n>このワールドへの URL をコピーしました</i18n>
            </span>
          </div>
          <a class="button is-info is-small" id="full-screen" onclick={onFullScreenClick}>
              <i18n>全画面</i18n> &nbsp; 
              <span class="icon"><ion-icon name="expand"></ion-icon></span></a>
          <div class="block" id="full-screen-message">
            <span class="tag is-success">
              <i18n>画面外のダブルタップで次のワールドを生成できます</i18n>
            </span>
          </div>
        </div>

        <!-- 標準コントロール -->
        <pl-controls 
          intf={controlsIntf}
          on-show-editor={()=> root.classList.toggle('world-editor-shown')} 
          on-record={onRecordClick} 
          on-restart={onRestartFromControls}
          on-pause={onPauseClick}
          on-update={onControlsUpdate}
          on-help={()=> helpPopupIntf.show()}
        ></pl-controls>
      </div>

      <!-- ワールドエディタ -->
      <div class="column is-narrow" id="world-editor">
        <interaction-editor width="600" intf={intEditorIntf} 
            on-max-fps-change={(e)=>{ if(renderer) renderer.maxFps = e.target.value}}
            on-recording-fps-change={(e)=>{ if(renderer) renderer.recordingFps = e.target.value}}>
        </interaction-editor>
      </div>

    </div>

    <!-- 録画データを表示するエリア -->
    <video-holder data-blob={state.videoBlob} data-name={state.videoName}></video-holder>

    <!-- ヘルプ表示コントロール＆ヘルプ文字列 -->
    <div class="content">
        <help-popup intf={helpPopupIntf}>
          <ul>
            <li each={message in messages}><raw html={message}></raw></li>
          </ul>
        </help-popup>
    </div>
  <section>

  <style type="scss">
    #fps {
      text-align:right;
      max-width:600px;
    }

    help-popup > ul {
      max-width: 600px;
    }

    .top-buttons {
      position: relative;
      margin-bottom:20px;
      margin-top:4px;
      overflow-x: clip;
      max-width: var(--100vw);
      white-space: nowrap;
      .button {
        margin-right: 5px;
      }
    }

    @media screen and (max-width: 420px) {
      .top-buttons {
        margin-left: -0.75rem;
        margin-right: -0.75rem;
      }
    }

    #copy-url-message {
      display: block;
      position: absolute;
      top: -40px;
      left: 70px;
    }

    #copy-url-message {
      display: none;
    }

    #full-screen-message {
      display: none;
      position:absolute;
      top: -50px;
      left: 30px;
    }

    #world-editor {
      display: none;
    }

    :host.world-editor-shown #world-editor {
      display: block;
    }

    :host.world-editor-shown pl-controls {
      max-width: 600px;
      display: block;
    }

  </style>

  <script>
    /**
    * @module riot/app
    */

    import { CanvasRenderer } from '../canvas-renderer.js'
    import { interactionSets } from '../interaction-sets.js'
    import { ColorScale, colorScaleList } from "../color-scale.js"
    import { ParticleLife } from '../particle-life.js'
    import { XorShift128 } from '../xorshift128.js'
    
    export default {
      onBeforeMount(props, state) {
        // コンポーネントを構成する

        this.world = null;
        this.colorFunc = null;

        this.displayIntf = {
          world: () => this.world,
          colorFunc: () => this.colorFunc,
          repelX: NaN,
          repelY: NaN,
          update: null,
          render: null,
          canvas: null
        }

        this.helpPopupIntf = {
          show: null
        }
        
        this.colorScaleEditorIntf = {
          update: null,
          colorScaleList: colorScaleList,
        }

        this.intEditorIntf = {
          update: null,
          intColorFunc: (()=>{
                const colorScale = new ColorScale([  // heat
                  [0/4,   0, 255, 255 ],
                  [1/4,   0,   0, 192 ],
                  [2/4,   0,   0,   0 ],
                  [3/4, 192,   0,   0 ],
                  [4/4, 255, 255,   0 ],
                ]);
                return (x)=> colorScale.color(x);
              })(),
        }

        this.controlsIntf = {
          update: null,
          recommendations: props.recommendations,
        }
      },

      onMounted() {

        // ショートカットキーを登録
        document.addEventListener('keydown', this.onKeyDown);

        this.renderer = new CanvasRenderer(
          this.displayIntf.canvas(),                  // canvas
          this.render,                                // render func
          (blob)=> this.update({
                videoBlob: blob, 
                videoName: this.getWorldURL().split('?') // ファイル名
              })
        );
        this.renderer.maxFps = 61;

        this.setParameters(this.getSearchString(false));
        this.restart();
      },

      onUnmounted() {
        document.removeEventListener('keydown', this.onKeyDown);
      },

      onKeyDown(e) {
        if(e.key == 'n' || e.key == 'N') {
          event.preventDefault();
          event.stopPropagation();
          this.restart(true, !!document.fullscreenElement);
        } else
        if(e.key == ' ') {
          event.preventDefault();
          event.stopPropagation();
          this.$("#pause").click();
        } else
        if(e.key == 'Enter' && e.altKey) {
          event.preventDefault();
          event.stopPropagation();
          if(document.fullscreenElement) {
            document.exitFullscreen();
          } else {
            this.requestFullScreen();
          }
        }
      },

      onControlsUpdate(e) {
        let [difference, options] = e.detail;
        if(this.root.classList.contains('world-editor-shown')) {
          difference = difference.filter(k => k != "perturb");
          delete options.perturb; // エディタが world に直接書くので指定は無視する
        }
        if(difference.some(k=> ["tail", "screen", "particleSize"].includes(k))) {
          const {tail, screen, particleSize} = options;
          this.displayIntf.update({tail, screen, particleSize});
        }
        this.$('color-scale-editor').style.display = 
            options.showPalette ? 'block' : 'none';
            
        // 取っておく
        this.state.controlsSetting = options;

        const keysNotWorldSetting = [ 'pause', 'recording', 'showPalette', 'tail', 
                                   'screen', 'particleSize', 'full-screen'];
        const keysRequireRestert = [ "nspecies", "nlattice", "scale", "intset", 
                                     "step", "world_seed", "interact_seed"]
        if(difference.some(k=> ! keysNotWorldSetting.includes(k))) {
          if(difference.some(k=> keysRequireRestert.includes(k))) {
            this.restart(false, false)
          } else {
            if(this.world) this.world.update(options);
          }
        }

        if(difference.includes('full-screen'))
          this.requestFullScreen();
      },

      onColorScaleEditorUpdate(e) {
        this.colorFunc = e.detail.colorFunc;
        if(this.intEditorIntf.update) 
          this.intEditorIntf.update();
        this.displayIntf.render();

        // 取っておく
        this.state.paletteSetting = e.detail;
      },

      displayFps(renderer) {
        const elemFps = document.getElementById('fps');
        const frame = renderer.counter <   1000 ? renderer.counter :
                                                  Math.round(renderer.counter/100)/10 + "k";
        elemFps.innerText = `frame# ${frame}, ${String(renderer.fps).slice(0, 4)} fps`;
      },

      /**
       * １フレーム分の計算を行い表示を更新する
       */
      render() {
        this.world.interactParticles();
        this.world.repelParticles(this.displayIntf.repelX, this.displayIntf.repelY);
        this.world.moveParticles();
        this.displayIntf.render();
        this.displayFps(this.renderer);
      },

      /**
       * this.world に ParticleLife のインスタンスを作成あるいは更新し初期配置に戻す
       * @param {bool} [randomize=false] - 設定を乱数で更新するかどうか
       * @param {bool} [fullScreen=false] - フルスクリーンにするかどうか
       */
      createWorld(randomize=false, fullScreen=false) {
        const options = this.getWorldOptions(randomize, fullScreen);
        if(this.root.classList.contains('world-editor-shown')) {
          delete options.perturb; // エディタが world に直接書くので指定は無視する
        }
        if(!this.world) {
          this.world = new ParticleLife(options, new XorShift128(options.world_seed));
        } else {
          this.world.update(options, new XorShift128(options.world_seed));
        }

        // 相互作用を指定する
        interactionSets[options.intset](this.world.interaction, new XorShift128(options.interact_seed));

        // 粒子種に偏りを持たせるための確率分布の累積を作る
        let distribution = new PLSpeciesDistribution(this.world.nspecies, this.world.rand);

        // 粒子の初期配置を決める
        this.world.setupParticles( (i, j) => [
          // 本当は world.nlattice で割るべきなのだけれど互換性のためこのまま
          distribution.species(this.world.rand.next()),
          i / (this.world.nlattice - 1) - 0.5 + 0.2 * (this.world.rand.next() - 0.5),  // x
          j / (this.world.nlattice - 1) - 0.5 + 0.2 * (this.world.rand.next() - 0.5),  // y
          0, 0  // vx, vy
        ]);
      },

      /**
       * this.world に ParticleLife のインスタンスを作成あるいは更新し初期配置からスタートする
       * @param {bool} [randomize=false] - 設定を乱数で更新するかどうか
       * @param {bool} [fullScreen=false] - フルスクリーンにするかどうか
       */
      restart(randomize = false, fullScreen = false) {
        if(this.world) this.world.recreating = true;
        try {
          this.createWorld(randomize, fullScreen);
        } finally {
          this.world.recreating = false;
        }
        this.intEditorIntf.update({
          world: this.world,
          colorFunc: (x) => this.colorFunc(x)
        });
        this.renderer.start(true);
      },

      onPauseClick(e) {
        if(e.detail.pause) {
          this.renderer.stop();
        } else {
          this.renderer.start();
        }
      },

      onRecordClick(e) {
        if(e.detail.recording) {
          this.renderer.startRecording();
        } else {
          this.renderer.stopRecording();
        }
      },

      onRestartFromControls(e) {
        this.renderer.stop();
        const {randomize} = e.detail;
        this.restart(randomize);
      },

      onFullScreenClick() {
        const style = this.$("#full-screen-message").style;

        if(!this.state.fullScreenMessageShown) {
          // 初回のみメッセージを表示する
          this.state.fullScreenMessageShown = true;
          style.display = "block"
          setTimeout(()=> {
              style.display = "none";
              this.requestFullScreen(); 
          }, 2000);
        } else {
          this.requestFullScreen();
        }
      },

      onCopyUrlClick() {
        navigator.clipboard.writeText(this.getWorldURL());

        // メッセージを表示
        const style = this.$("#copy-url-message").style;
        setTimeout(()=> style.display = 'block', 100);
        setTimeout(()=> style.display = 'none', 1600);
      },

      /**
       * フルスクリーンに切り替える
       */
      requestFullScreen() {
        // キャンバスサイズを変更
        this.displayIntf.update({screen: "F"});

        // すでにフルスクリーン表示中ならこれで終わり
        if(document.fullscreenElement)
          return;

        // フルスクリーンにする
        const canvas = document.getElementById("particles-display");
        canvas.requestFullscreen({navigationUI: "hide"}).then(() => {}).catch((err) => {
          this.displayIntf.update({screen: this.state.controlsSetting.screen});
          alert(`Requesting fullscreen in keydown event is denied, probably due to the bug of Firefox: ${err.message} (${err.name})`);
        });

        canvas.addEventListener('fullscreenchange', (e) => {
          if(!document.fullscreenElement) {
            // フルスクリーンが終了した
            // canvas を元のサイズに戻す
            this.displayIntf.update({screen: this.state.controlsSetting.screen});
          }
        });
      },

      /**
       * 数値を 0-9, A-Z, a-z のアルファベットに直す
       * @param {number} n - 変換される数値
       * @returns {string} 変換結果の１文字を返す
       */
      num2char(n) {
        n = Number(n);
        const offset = n < 10          ? 0x30           :     // '0'
                       n < 10 + 26     ? 0x41 - 10      :     // 'A'
                       n < 10 + 26 * 2 ? 0x61 - 10 - 26 : -1; // 'a'

        if(offset < 0) return "?";
        
        return String.fromCharCode(offset + n);
      },
      
      /** 
       * 0-9, A-Z, a-z のアルファベットを数値に直す 
       * @param {string} c - 尖頭のもc時を数値にして返す
       * @returns {number} おかしな値が与えられた場合には NaN を返す
       */
      char2num(c) {
        if(c == '?') return NaN;
        c = c.charAt(0);
        let n = c.charCodeAt(0);
        return ('a' <= c && c <= 'z') ? n - 0x61 + 10 + 26 :
               ('A' <= c && c <= 'Z') ? n - 0x41 + 10      :
               ('0' <= c && c <= '9') ? n - 0x30           : NaN;
      },

      /**
       *  現在の設定を search 文字列に直す
       */
      encodeParameters() {
        const options = this.state.controlsSetting || this.controlsIntf.default_state;
        let search = '?'; //  + (options.screen != 'S' ? options.screen : ''); 保存しないことにした
        search += options.nspecies + "_" + options.nlattice;
        search += "_" + options.interact_seed + options.intset + "_" + options.world_seed;
        search += options.perturb  ? "" : "n";
        search += "_" + options.tail;
        search += "_" + options.scale;
        search += "_" + options.step;
        const paletteSetting = this.state.paletteSetting;
        search += "_" + this.num2char(paletteSetting.iscale);
        search += ("0" + Math.round(paletteSetting.offset*255).toString(16)).slice(-2);
        search += ("0" + Math.round(paletteSetting.scale * 16 - 16).toString(16)).slice(-2);
        search += Math.round(options.particleSize * 2);

        search += "_" + this.num2char(options.pshape);
        search += ("0" + Math.round(options.highlight*4).toString(16)).slice(-2);
        search += ("0" + Math.round(options.glowr / options.scale * 20).toString(16)).slice(-2);
        search += ("0" + Math.round(options.glowi*20).toString(16)).slice(-2);
        return search;
      },

      /**
       *  search 文字列に与える設定文字列を生成する
       *  @param {bool} randomizeSeeds - シード値を再生成するかどうか
       */
      getSearchString(randomizeSeeds = false) {
        // randomize するため controls に移譲する
        return this.controlsIntf.getSearchString(
                  this.encodeParameters(), randomizeSeeds)
      },

      /**
       *  search 文字列で与えられる設定を取り込む
       *  @param {string} search - location.search に与えられるような設定文字列 
       *  @param {bool} fullScreen - フルスクリーンにするかどうか
       */
      setParameters(search, fullScreen = false) {
        let result = this.parseParameters(search);
        if(fullScreen) result.screen = "F";
        this.controlsIntf.update(result)  // 巡り巡って screen も変更される
        this.colorScaleEditorIntf.update(result.paletteSetting);
      },

      /**
       * search 文字列から this.controlsIntf.update / this.colorScaleEditorIntf.update に渡すべき内容を生成する
       * @param {string} search - location.search に与えられるような設定文字列
       */
      parseParameters(search) {
        if(!search)   // 何も指定されないときのデフォルト
          search = this.getSearchString(true);

        let result = Object.assign({}, this.controlsIntf.default_state);

        // 先頭の ? を外して _ で分ける
        let displaySetting;
        let particleSetting = "0005000";
        let options = search.substring(1).split('_');
        if(options.length == 4) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed] = options;
           result.scale = 1;
        } else
        if(options.length == 5) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed, result.tail] = options;
           result.scale = 1;
        } else
        if(options.length == 6) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed, result.tail, result.scale] = options;
        } else
        if(options.length == 7) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed, result.tail, result.scale, result.step] = options;
        } else
        if(options.length == 8) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed, result.tail, result.scale, result.step, displaySetting] = options;
        } else
        if(options.length == 9) {
          [result.nspecies, result.nlattice, result.interact_seed, 
           result.world_seed, result.tail, result.scale, result.step, 
           displaySetting, particleSetting] = options;
        } else {
          return {};
        }
        
        // 揺動
        let match = /^(.*)n$/.exec(result.world_seed);
        if(match) {
          result.world_seed = match[1];
          result.perturb = 0;
        }

        // スクリーンサイズ
        match = /^(XS|S|M|L|F)(.+)/.exec(result.nspecies);
        if(match) {
          result.screen = match[1];
          result.nspecies = match[2];
        }
        result.screen = "S";  // 無視することにした
        
        // 大文字のアルファベットは相互作用セットの指定
        if(/[A-Z]/.test(result.interact_seed.slice(-1))) {
          result.intset = result.interact_seed.slice(-1);
          result.interact_seed = result.interact_seed.slice(0,-1);
        }
        
        if(displaySetting) {
          result.paletteSetting ||= {}
          let iscale = this.char2num(displaySetting.slice(0, 1), 16);
          if( isNaN(iscale) || iscale < 0 || colorScaleList.length <= iscale )
            iscale = 0;
          result.paletteSetting.iscale = iscale;

          let offset = parseInt(displaySetting.slice(1, 3), 16) / 255;
          if( isNaN(offset) || offset < 0 || 1 <= offset) {
            offset = Math.round(Math.random() * 100) / 100;
          }
          result.paletteSetting.offset = offset;

          let scale = 1 + parseInt(displaySetting.slice(3, 5), 16) / 16;
          if( isNaN(scale) || scale < 1 || 17 <= scale) {
            let rand = Math.random() ** 4;  // ゼロに近い方をより多く
            if(rand < 0.2) rand = 0; // 全範囲を使う確率をある程度取る
            scale = 1 + rand;
          }
          result.paletteSetting.scale  = scale;

          let size = displaySetting.slice(5) / 2;
          if( isNaN(size) || size < 0.5 || 100 <= size) {
            size = 4;
          }
          result.particleSize  = size;
        }

        result.pshape = this.char2num(particleSetting.slice(0, 1));
        result.highlight = parseInt(particleSetting.slice(1, 3), 16) / 4;
        result.glowr = parseInt(particleSetting.slice(3, 5), 16) / 20 * result.scale;
        result.glowi = parseInt(particleSetting.slice(5, 7), 16) / 20;

        return result;
      },

      /**
       * ParticleLife に渡すためのオプションを得る
       * @param {bool} [randomize=false] - 設定を乱数で更新するかどうか
       * @param {bool} [fullScreen=false] - フルスクリーンにするかどうか
       */
      getWorldOptions(randomize, fullScreen) {
        if(randomize)
          this.setParameters(this.getSearchString(randomize), fullScreen);
        return this.state.controlsSetting;
      },

      /**
       * 現在のワールドへの URL を得る
       */
      getWorldURL() {
        return location.href.replace(/[^\/]*$/, this.encodeParameters())
      },

    }
  </script>

</app>
