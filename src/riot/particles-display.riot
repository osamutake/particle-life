<!-----------------------------------------------------------------

  粒子を表示するコントロール
  css は bulma を使用

  props = {
    width
    height
    intf
  }

  intf = {
    world: 
    colorFunc: 
    repelX: NaN,
    repelY: NaN,
    update: null,
    render: null
  }

  state = {
    offsetX: 0,   // 内部でのみ使われる
    offsetY: 0,   // 内部でのみ使われる
    tail: 0       // 内部でのみ使われる
  }

----------------------------------------------------------------->

<particles-display>
  <canvas id="particles-display" width={props.width} height={props.height}></canvas>

  <style type="scss">
    :host {
      line-height: 1;

      > div {
        margin: 0px;
      }
    }
    canvas {
      touch-action: none;
      margin: 0px;
      max-width: var(--100vw);
      max-height: var(--100vw);
    }
    @media screen and (max-width: 640px) {
      canvas {
        margin-left: -0.75rem;
        margin-right: -0.75rem;
      }
    }
    @media screen and (min-width: 1000px) {
      canvas {
        min-width: 600px;
        min-height: 600px;
      }
    }
  </style>

  <script>
    import {renderer2d} from "./particles-display-2d.js"
    import {rendererGL} from "./particles-display-gl.js"

    export default {
      onBeforeMount(props, state) {
        Object.assign(state, {
          offsetX: 0,
          offsetY: 0,
          tail: 0,
          particleSize: 3,
          scale: 1
        })

        props.intf.update = (...args) =>
          this.update(...args);

        props.intf.render = (...args) =>
          this.render(...args);

        props.intf.canvas = () => this.$('canvas');
      },

      onMounted() {
        this.registerPointerHandlers()
      },

      get effectiveScale() {
        let scale = this.state.scale;
        if(0.8 < scale && scale < 1) scale = 1;
        return scale;
      },

      registerPointerHandlers() {
        const canvas = this.$("#particles-display");

        // マウス座標から x, y 座標 [-0.5, 0.5) に直す
        const mouse2xySub = (mouseX, mouseY) => {
          const size = Math.min(canvas.clientWidth, canvas.clientHeight)
          const ox = (canvas.clientWidth -  size) / 2
          const oy = (canvas.clientHeight - size) / 2
          const scale = this.effectiveScale;
          const x = ((mouseX - ox) / size - 0.5) / scale + 0.5
          const y = ((mouseY - oy) / size - 0.5) / scale + 0.5
          return [x, y]
        };

        // [-0.5, 0.5) に巻き取る
        const mouse2xy = (mouseX, mouseY) => {
          let [x, y] = mouse2xySub(mouseX, mouseY)
          x += this.state.offsetX
          y += this.state.offsetY
          return [x - Math.round(x), y - Math.round(y)]
        };

        // 中央領域にあるかどうか
        const mouseInDisplay = (mouseX, mouseY) => {
          const [x, y] = mouse2xySub(mouseX, mouseY)
          return 0 < x && x < 1 && 0 < y && y < 1
        };
        
        let canvasTapCount = 0;
        let possibleSingleClick = false;
        let mouseButtonDown = false;
        let mouseDoubleDown = false;
        let pinchL, pinchScale;
        this.defineDragBehavior( canvas, {
          down: (e, x, y, points) => {
            if(e.buttons != 1) return;  // 左ボタン以外が押されていれば無視
            mouseButtonDown = true;
            const keys = Object.keys(points).filter(k=> points[k].buttons == 1);
            if(keys.length != 1) {  // マルチタッチ
              if(keys.length == 2) {
                // ピンチ開始
                const [e0, e1] = keys.map(k=> points[k]);
                pinchL = Math.hypot(e1.offsetX - e0.offsetX,  // 距離
                                    e1.offsetY - e0.offsetY);
                pinchScale = this.state.scale; // 初期スケール
                e.preventDefault();
                return;
              } else {
                return; // ２つ以上のマルチタッチは無視
              }
            }

            e.preventDefault();
            if( canvasTapCount == 0 ) { // シングルタップ
              possibleSingleClick = true;
              canvasTapCount++;
              setTimeout( () =>{
                if(possibleSingleClick && !mouseButtonDown) {
                  // シングルクリック/タップ
                  this.dispatchEvent('pause');
                }
                canvasTapCount = 0; 
              }, 200 ) ;
            } else {                    // ダブルタップ
              canvasTapCount = 0 ;
              possibleSingleClick = false;
              if(!mouseInDisplay(x,y)){
                this.dispatchEvent("restart");
                return;
              }
              mouseDoubleDown = true;
              [this.props.intf.repelX, this.props.intf.repelY] = mouse2xy(x, y)
            }
          },
          move: (e, mouseDown, newX, newY, oldX, oldY, points) => {
            possibleSingleClick = false;  // 動かしたらダメ
            if(mouseDown) {               // 左ボタン以外が押されていれば無視
              if(e.buttons != 1) return;  // 左ボタンが押されてなくても無視
              const keys = Object.keys(points).filter(k=> points[k].buttons == 1);
              if(keys.length != 1) {
                if(keys.length == 2) {
                  // ピンチ
                  const [e0, e1] = keys.map(k=> points[k]);
                  const l = Math.hypot(e1.offsetX - e0.offsetX,  // 距離
                                       e1.offsetY - e0.offsetY);
                  this.state.scale = pinchScale * l / pinchL;
                  this.state.scale = Math.min(4, Math.max(0.5, this.state.scale));
                  e.preventDefault();
                  this.render();
                  return;
                } else {
                  return; // マルチタッチは無視
                }
              }

              e.preventDefault();
              if(!mouseDoubleDown) {    
                const size = Math.min(canvas.clientWidth, canvas.clientHeight);
                const [dx, dy] = [newX - oldX, newY - oldY];
                if(e.ctrlKey) {
                  this.state.scale *= 1 - 2 * dy / size;
                  this.state.scale = Math.min(4, Math.max(0.5, this.state.scale));
                } else {
                  // スクロールする
                  this.state.offsetX -= dx / size / this.state.scale;
                  this.state.offsetX -= Math.round(this.state.offsetX);
                  this.state.offsetY -= dy / size / this.state.scale; 
                  this.state.offsetY -= Math.round(this.state.offsetY);
                }
                this.render();
              } else {                  // 斥力
                [this.props.intf.repelX, this.props.intf.repelY] = mouse2xy(newX, newY)
              }
            }
          },
          up: (e, x, y, points) => {
            if(e.button == 0) {
              mouseButtonDown = false;  // 左ボタンが押されている
              mouseDoubleDown = false;
              [this.props.intf.repelX, this.props.intf.repelY] = [NaN, NaN]
              this.state.scale = this.effectiveScale; // 1倍で表示されていれば実際に1にする
            }
          }
        });
      },

      onUpdated(props, state) {
        const screens = {
          XS: 400, S: 600, M: 900, L: 1200, XL: 1500, 
          F: Math.min(window.screen.width, window.screen.height)
        }
        this.state.size = screens[this.state.screen] ?? 600
        let [w, h] = [this.state.size, this.state.size]
        if(this.state.screen == "F")
          [w, h] = [window.screen.width, window.screen.height]
        
        // 表示サイズはこちらで指定
        let canvas = this.$('canvas');
        [canvas.style.width, canvas.style.height] = [w + "px", h + "px"];

        // 描画解像度は実デバイスに合わせる
        const r = window.devicePixelRatio;
        this.state.size *= r;
        [canvas.width, canvas.height] = [w * r, h * r]

        this.render()
      },

      // 粒子サイズは画面サイズ相対
      calcParticleSize() {
        return this.state.particleSize / 600 * this.state.size;
      },

      // 2d と webgl とを切り替えるには一旦作り直さなければならない
      recreateCanvas(canvas) {
        const clone = canvas.cloneNode();
        canvas.replaceWith(clone);
        canvas.width = 0;   // こうしておくと早くメモリが解放される？？？
        canvas.height = 0;  // https://tech.mobilefactory.jp/entry/2019/12/17/143000
        this.registerPointerHandlers();
        return clone;
      },

      /// 描画する
      render() {
        const world = this.props.intf.world();
        const colorFunc = this.props.intf.colorFunc();
        if(!world || !colorFunc) return;
        if(world.recreating) return;

        let canvas = this.$("canvas");
        const canvasMode = document.getElementById('canvas-mode');
        if(canvasMode.value == "webgl") {
          let gl = canvas.getContext('webgl');
          if(!gl) {
            // 2d 描画した後は一回作り直さないといけない
            canvas = this.recreateCanvas(canvas);
            gl = canvas.getContext('webgl');
          }
          if(gl) {
            renderer2d.clearBuffers();

            // "#000000" 形式の配色を数値に直す
            const palette = [...Array(world.nspecies)].map((_, i) => {
                const c = colorFunc(i/world.nspecies);
                return [ parseInt(c.slice(1, 3), 16),   // r
                          parseInt(c.slice(3, 5), 16),   // g
                          parseInt(c.slice(5, 7), 16) ]  // b
              }
            );
            let {glowr, glowi} = world;
            glowr /= (world.scale / 1.5); // glow 半径は world.scale 相対

            rendererGL.render(gl, world.particles, 
              this.calcParticleSize(), 
              palette, world.pshape, world.highlight, world.glowr / world.scale, world.glowi,
              this.state.tail,
              this.effectiveScale, this.state.offsetX, this.state.offsetY);
            return;
          }
          // WebGL が使えない
          canvasMode.value = "screen";
          document.querySelector('#canvas-mode option[value="webgl"]').disabled = true;
        } 

        // 古いものがあれば消しておく
        rendererGL.clearBuffers();

        // 2d context を得る
        let g = canvas.getContext('2d');
        // WebGL で描画した後は一回作り直さないといけない
        if(!g) {
          canvas = this.recreateCanvas(canvas);
          g = canvas.getContext('2d');
        }
        if(!g) {
          throw new Error('canvas 2d context is not available');
        }
        
        const palette = [...Array(world.nspecies)].map((_, i) => colorFunc(i/world.nspecies))
        renderer2d.render(   // imported from particle-display-2d.js
          g,
          world.particles, 
          document.getElementById('canvas-mode').value, 
          this.calcParticleSize() / this.state.size / 2, 
          palette, 
          this.state.tail,
          this.state.scale, this.state.offsetX, this.state.offsetY
        );
      },
    }
  </script>
</particles-display>
