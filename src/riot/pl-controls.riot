p<!-----------------------------------------------------------------

  ワールド生成パラメータを制御するためのコントロール
  css は bulma を使用

  props = {
  }

  this.state = {
    pause: false,
    recording: false,
    interact_seed: 2**53 * Math.random(),
    world_seed: 2**53 * Math.random(),
    nspecies: 6,
    nlattice: 30,
    scale: 1,
    tail: 0,
    maxfps: 20,
    intset: "",
  };

  EVENTS: どれも e.detail には state が入る
    update
    restart
    pause
    record

----------------------------------------------------------------->

<pl-controls>
  <section>
    <div class="columns">
      <div class="column is-narrow field">
        <label for="recommendation" class="label"><i18n>ワールド設定</i18n></label>
        <div class="select" onclick={()=> flashControlCancel()}>
          <select id="recommendation" value="" onchange={ recommendationChange }>
            <option value="" >{i18n.t("URLで")}</option>
            <option  each={ recommendation in recommendations } 
                key={recommendation[1]} value={recommendation[1]}>{i18n.t(recommendation[0])}</option>
          </select>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="interact_seed" class="label"><i18n>描画制御</i18n></label>
        <div class="field has-addons">
          <p class="control">
            <button class="button" onclick={ ()=> dispatchEvent("restart", {randomize: false}) } 
              id="replay" title={i18n.t("始めに戻ってリプレイ")}>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-skip-backward-fill" viewBox="0 0 16 16">
              <path d="M.5 3.5A.5.5 0 0 0 0 4v8a.5.5 0 0 0 1 0V8.753l6.267 3.636c.54.313 1.233-.066 1.233-.697v-2.94l6.267 3.636c.54.314 1.233-.065 1.233-.696V4.308c0-.63-.693-1.01-1.233-.696L8.5 7.248v-2.94c0-.63-.692-1.01-1.233-.696L1 7.248V4a.5.5 0 0 0-.5-.5z"/>
              </svg>
            </button>
          </p>
          <p class="control">
            <button id="pause" class={ state.pause ? "button is-danger" : "button" }
                    onclick={ ()=> { update({pause: !state.pause }); dispatchEvent("pause", state); } } 
                    title={ i18n.t("ポーズ／再開") }>
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16" if={!state.pause}>
                <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"/>
              </svg>
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16" if={state.pause}>
                <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"/>
              </svg>              
            </button>
          </p>
          <p class="control">
            <button id="recording" class={ state.recording ? "button is-danger" : "button" } 
                    onclick={ ()=>{ update({recording: !state.recording }); dispatchEvent("record", state); } } 
                    title={ i18n.t("webm に録画") }>
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-record-fill" viewBox="0 0 16 16" if={!state.recording}>
                <path fill-rule="evenodd" d="M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10z"/>
              </svg>
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-stop-fill" viewBox="0 0 16 16" if={state.recording}>
                <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z"/>
              </svg>
            </button>
          </p>
          <p class="control">
            <button id="palette" class={ state.showPalette ? "button is-dark" : "button" } 
                    onclick={ ()=>{ update({showPalette: !state.showPalette }) } } 
                    title={ i18n.t("カラーパレット編集") }>
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-palette-fill" viewBox="0 0 16 16">
                <path d="M12.433 10.07C14.133 10.585 16 11.15 16 8a8 8 0 1 0-8 8c1.996 0 1.826-1.504 1.649-3.08-.124-1.101-.252-2.237.351-2.92.465-.527 1.42-.237 2.433.07zM8 5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM5 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/>
              </svg>
            </button>
          </p>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="particleSize" class="label"><i18n>粒径</i18n></label>
        <div class="control">
          <input class="input" id="particleSize" inputmode="decimal"  value={state.particleSize} size="3" onchange={ editorChanged } /> 
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="screen" class="label" style="position:relative;"><i18n>画面</i18n> &nbsp; 
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-arrows-fullscreen is-clickable" viewBox="0 0 16 16" onclick={ ()=> update({screen: "F"}) }>
          <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z"/>
          </svg>
        </label>
        <div class="select">
          <select id="screen" value={state.screen} onchange={ editorChanged }>
            <option value="XS">XS</option>
            <option value="S">S</option>
            <option value="M">M</option>
            <option value="L">L</option>
            <option value="F">Full</option>
          </select>
        </div>
      </div>
      <div class="column is-narrow field">
        <label class="label"><i18n>使い方</i18n></label>
        <div class="control">
          <button class="button is-info" onclick={props.onHelp}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-lg" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M4.475 5.458c-.284 0-.514-.237-.47-.517C4.28 3.24 5.576 2 7.825 2c2.25 0 3.767 1.36 3.767 3.215 0 1.344-.665 2.288-1.79 2.973-1.1.659-1.414 1.118-1.414 2.01v.03a.5.5 0 0 1-.5.5h-.77a.5.5 0 0 1-.5-.495l-.003-.2c-.043-1.221.477-2.001 1.645-2.712 1.03-.632 1.397-1.135 1.397-2.028 0-.979-.758-1.698-1.926-1.698-1.009 0-1.71.529-1.938 1.402-.066.254-.278.461-.54.461h-.777ZM7.496 14c.622 0 1.095-.474 1.095-1.09 0-.618-.473-1.092-1.095-1.092-.606 0-1.087.474-1.087 1.091S6.89 14 7.496 14Z"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
    <div class="columns">
      <div class="column is-narrow field">
        <label for="pshape" class="label"><i18n>粒子形状</i18n></label>
        <div class="select">
          <select id="pshape" value={state.pshape} onchange={ editorChanged }>
          <option value="0">0</option>
          <option value="1">1</option>
          <option value="2">2</option>
          <option value="3">3</option>
          <option value="4">4</option>
          </select>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="highlight" class="label"><i18n>ハイライト</i18n></label>
        <div class="control">
          <input class="input" id="highlight" inputmode="decimal" value={state.highlight} size="2" onchange={ editorChanged }/>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="glowr" class="label"><i18n>グロー距離</i18n></label>
        <div class="control">
          <input class="input" id="glowr" inputmode="decimal" value={state.glowr} size="2" onchange={ editorChanged }/>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="glowi" class="label"><i18n>グロー輝度</i18n></label>
        <div class="control">
          <input class="input" id="glowi" inputmode="decimal" value={state.glowi} size="2" onchange={ editorChanged }/>
        </div>
      </div>
      <div class="column is-narrow field">
        <label for="darken" class="label"><i18n>外を暗く</i18n></label>
        <div class="control">
          <input id="darken" type="checkbox" checked={state.darken != 0} onchange={ editorChanged } /> 
        </div>
      </div>
    </div>
    <div style={`display: ${ $('#recommendation').value=='?' ? 'block' : 'none' }`}>
      <div class="columns">
        <div class="column is-narrow field">
          <label for="nspecies" class="label"><i18n>粒子種数</i18n></label>
          <div class="control">
            <input class="input" id="nspecies" inputmode="decimal" value={state.nspecies} size="2" onchange={ editorChanged }/>
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="nparticles" class="label"><i18n>√粒子数</i18n></label>
          <div class="control">
            <input class="input" id="nlattice" inputmode="decimal" value={state.nlattice} size="2" onchange={ editorChanged }/>
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="scale" class="label"><i18n>スケール</i18n></label>
          <div class="control">
            <input class="input" id="scale" inputmode="decimal"  value={state.scale} size="2" onchange={ editorChanged }/>
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="step" class="label"><i18n>計算ステップ</i18n></label>
          <div class="control">
            <input class="input" id="step" inputmode="decimal"  value={state.step} size="2" onchange={ editorChanged }/> 
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="tail" class="label"><i18n>尾の長さ</i18n></label>
          <div class="control">
            <input class="input" id="tail" inputmode="decimal"  value={state.tail} size="2" onchange={ editorChanged }/> 
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="perturb" class="label"><i18n>揺動</i18n></label>
          <div class="control">
            <input id="perturb" type="checkbox" checked={state.perturb != 0} onchange={ editorChanged } /> 
          </div>
        </div>
      </div>
      <div class="columns">
        <div class="column is-narrow field">
          <label for="intset" class="label"><i18n>相互作用セット</i18n></label>
          <div class="select">
            <select id="intset" value={state.intset} onchange={ editorChanged }>
              <option value="">{i18n.t("デフォルト")}</option>
              <option value="A">{i18n.t("多粒子種補正A")}</option>
              <option value="B">{i18n.t("多粒子種補正B")}</option>
            </select>
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="interact_seed" class="label"><i18n>相互作用シード</i18n></label>
          <div class="field has-addons">
            <div class="control">
              <input class="input" id="interact_seed" inputmode="decimal" 
                value={ state.interact_seed } onchange={ editorChanged } size="12" min="1">
            </div>
            <div class="control">
              <a class="button is-info" onclick={ ()=> update({ interact_seed: 2**53 * Math.random() }) }>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z"/>
                  <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
        <div class="column is-narrow field">
          <label for="world_seed" class="label"><i18n>粒子配置シード</i18n></label>
          <div class="field has-addons">
            <div class="control">
              <input class="input" id="world_seed" inputmode="decimal" value={ state.world_seed } onchange={ editorChanged } size="12" min="1">
            </div>
            <div class="control">
              <a class="button is-info" onclick={ ()=> update({ world_seed: 2**53 * Math.random() }) }>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z"/>
                  <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>

      <a class="button is-info is-small" id="show-editor" onclick={props.onShowEditor}>
        <i18n>パラメータエディタを表示/非表示</i18n></a>
    </div>
  </section>

  <style type="scss">
    button svg.bi {
      width: 19px;
      height: 19px;
    }

    .columns {
      display: flex;
      max-width: var(--100vw);
      flex-wrap: wrap;
      @media screen and (min-width: 420px) and (max-width: 640px) {
        padding-left: 0.5em;
      }
    }

    .is-narrow {
      flex: none;
      width: unset;
    }

    .column.is-narrow.field {
      padding: 0.5rem;
    }
  </style>

  <script>
    /**
    * 設定用のコントロールを表示する<br>
    * @module riot/pl-controls
    * @example
    * <!--
    *   plControlIntf = {
    *     update: null,                     // this.update が設定される
    *     getSearchString: null,            // this.getSearchString が設定される
    *     recommendations: recommendations, // お勧めリストデータ
    *   }
    * -->
    * <pl-controls
    *   intf={plControlIntf}
    *   on-show-editor={(e)=> some(e) }
    *   on-record={onRecordClick} 
    *   on-restart={onRestartFromControls}
    *   on-pause={onPauseClick}
    *   on-update={onControlsUpdate}
    *   on-help={()=> helpPopupIntf.show()}
    * >
    * </pl-controls>
    */

    import Validator from 'validatorjs'
    import {sleep} from '../util.js'
    import {i18n} from '../i18n.js'

    export default {
      async onBeforeMount(props, state) {
        this.i18n = i18n;

        props.intf.default_state = {
          pause: false,
          recording: false,
          interact_seed: 2**53 * Math.random(),
          world_seed: 2**53 * Math.random(),
          nspecies: 6,
          nlattice: 30,
          scale: 3,
          tail: 0,
          step: 1,
          intset: "",
          perturb: 0.001,
          screen: "S",
          particleSize: 2.5,
          pshape: 1,
          highlight: 1,
          glowr: 4,
          glowi: 0.8
        }

        Object.assign(state, props.intf.default_state);
        state.darken = true;

        this.recommendations.push(...props.intf.recommendations);

        props.intf.update = (...args) => this.update(...args);
        props.intf.getSearchString = (...args) => this.getSearchString(...args)
      },

      onMounted(props, state) {
        this.flashControl(this.$('#recommendation'), '#ff3');

        this.$$('input[inputmode="decimal"]').forEach((elem)=>
          elem.autocomplete = "off"
        )

        i18n.addEventListener('update', this.onI18nUpdate)
      },

      onUnmounted(props, state) {
        i18n.removeEventListener('update', this.onI18nUpdate)
      },

      onI18nUpdate() {
        this.update()
      },

      flashControlCancel: ()=>0,

      async flashControl(control, color) {
        this.flashControlCancel();

        const original = control.style.backgroundColor;
        let cancelRequested = false;
        this.flashControlCancel = ()=>{
          control.style.backgroundColor = original;
          cancelRequested = true; 
        };
        for(let i = 0; i < 5; i++) {
          control.style.backgroundColor = color;
          await sleep(400);
          if(cancelRequested) break;

          control.style.backgroundColor = original;
          await sleep(400);
          if(cancelRequested) break;
        }
      },

      recommendations: [['自分で', '?']],

      recommendationChange(e) {
        if(e.target.value == "?") {
          this.update();
        } else {
          this.dispatchEvent("restart", {randomize: true});
        }
        this.flashControl(document.getElementById('new-world'), '#880');
      },

      editorChanged(e) {
        let {id, value} = e.target;
        if(e.target.id == "perturb") {  // 規定値は 0.001
          this.update({perturb: e.target.checked ? 0.001 : 0});
        } else
        if(e.target.id == "scale") {    // scale を変えたら step も連動させる
          this.update({
            scale: value,
            step: Math.round(this.state.step * this.state.scale / value * 1000)/1000
          });
        } else 
        if(e.target.type == "checkbox") {
          this.update({[id]: e.target.checked});
        } else {
          this.update({[id]: value});
        }
      },

      onBeforeUpdate(props, state) {
        // allows recalculation of context data before the update
        const rule = {
          pause: 'boolean',
          recording: 'boolean',
          interact_seed: ['required', 'integer', 'min:1'],
          world_seed: ['required', 'integer', 'min:1'],
          nspecies: ['required', 'integer', 'between:1,200'],
          nlattice: ['required', 'integer', 'between:5,300'],
          scale: ['required', 'numeric', 'between:0.5,20'],
          tail: ['required', 'numeric', 'min:0'],
          intset: ['regex:/^[A-Z]?$/'],
          screen: ['required'],
          particleSize: ['required', 'numeric', 'between:0,127.5'],
          pshape: ['required', 'integer', 'between:0,4'],
          highlight: ['required', 'numeric', 'between:0,50'],
          glowr: ['required', 'numeric', `between:0,${8 * state.scale}`],
          glowi: ['required', 'numeric', 'between:0,10'],
          darken: ['required', 'boolean'],
        };

        state.validation = new Validator(state, rule);
        state.validation.passes();  // check!

        for(let id of Object.keys(rule)) {
          if(state.validation.errors.errors[id]) {
            this.$('#'+id).classList.add('is-danger');
            if(this.lastState && this.lastState[id])
              state[id] = this.lastState[id]; // 直前の値に戻す
          } else {
            this.$('#'+id).classList.remove('is-danger');
          }
        }
      },
      
      onUpdated(props, state) {
        let differentKeys = []; // 前回からの差分を検出
        Object.keys(this.state).forEach(k=>{
          if(!this.lastState || (this.state[k] != this.lastState[k]))
            differentKeys.push(k);
        });
        differentKeys = differentKeys.filter(k => k != "validation");

        if(state.screen == "F") {
          // 値は元に戻した上でフルスクリーンを要求する
          state.screen = this.lastState.screen;
          this.$("#screen").value = state.screen;
          differentKeys = differentKeys.filter(k => k != "screen");
          differentKeys.push('full-screen');
        }
        this.dispatchEvent("update", [differentKeys, {...state}]);

        // 直前の設定を取っておく
        this.lastState = {...state};
      },

      /**
       * @param {string} currentSetting
       * @param {boolean} [randomizeSeeds=false]
       */
      getSearchString(currentSetting, randomizeSeeds = false) {
        // ワールド設定を読み取る
        let search = this.$('#recommendation').value;

        // 自分で設定なら現在値
        if(search == '?') search = currentSetting;

        // URL 指定の場合
        if(!search) {
          // 先頭の ? を外して & で分け、key = value について処理する
          let searchList = location.search.slice(1).split('&');
          search = '?' + (searchList.filter((s)=> {
            const [k, v] = s.split('=');
            if(k == "world-editor") {
              this.dispatchEvent('show-editor');
            }
            return !v;
          })[0] || "");  // 残りがパラメータのはず
        }

        // URL で指定されてなければお勧め設定
        if(search == '?') {
          search = this.recommendations.find((rec)=> rec.length > 2)[1];
          this.$('#recommendation').value = search;
        }

        // randomizeSeeds 指定あるいは値が 0 ならシード値を置き換える
        let parts = search.split('_');
        if(randomizeSeeds) {
          parts[2] = parts[2].replace(/[0-9]+/, 2**56 * Math.random());
          parts[3] = parts[3].replace(/[0-9]+/, 2**56 * Math.random());
        } else {
          if(0 == parts[2].replace(/[^0-9]+$/, '')) {
            parts[2] = parts[2].replace(/[0-9]+/, 
                    this.state.interact_seed || 2**56 * Math.random() );
          }
          if(0 == parts[3].replace(/[^0-9]+$/, '')) {
            parts[3] = parts[3].replace(/[0-9]+/, 
                    this.state.world_seed    || 2**56 * Math.random() );
          }
        }
        search = parts.join('_');

        return search;
      },


    }
  </script>
</pl-controls>
